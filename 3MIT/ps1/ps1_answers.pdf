
1. What were your results from compare_cow_transport_algorithms? 
Which algorithm runs faster? Why?
'''
Using compare_cow_transport_algorithms, I have found out that the execution time of the 
greedy algorithm is so minuscule, it may as well be zero, for the given data (ps1_cow_data.txt)
This stems from the fact that;
a. There are only a handful cows (11).
b. My implementation of greedy algorithm's time complexity is 0(n^2).

This is in stark contrast with the brute force method that takes about half a second to run.
There are also several notable things about the get_partitions() method.
a. It iterable result are somewhat unpredictable. It changes every time it is executed.
    This means that in order to get the global optimal solution for the brute force method,
    you really have to test all of the possible trips provided by get_partitions.
b. The time complexity of get_partition is main contributing factor for the brute force algorithm.
    Suppose that the time complexity of get_partition is 't'. The time complexity of the entire 
    algorithm will be O(n(t^2)). Which means that if the time complexity of get_partition n^n, 
    the time complexity of the algorithm is O(n^n^2).
c. This is in accordance to what I have found when testing the brute force algorithm using greater 
    number of inputs (cows).
'''

2. Does the greedy algorithm return the optimal solution? Why/why not?
'''
The greedy algorithm, or at least my own implementation, does not return the optimal solution.
The solution is correct but there may be a much better solution which the brute force method 
always yield.

This can be explained from the fact that the greedy just tries to get close to the limit 
by picking the heaviest cow first. There might be other combination that will be equal to the limit,
thereby saving more on the number of trips. 

L = [9,9,7,6,5,3,3,2,2] - L[i] is weight of cows
The greedy will go: [9], [9], [7,3], [6,3], [3,2,2],[2] - 6 trips
but a more optimal solution should be: [9], [9], [7,3], [6,2,2], [3,3,2] - 5 trips
'''

3. Does the brute force algorithm return the optimal solution? Why/why no
'''
Yes. The brute force method always return a global optimal solution because it tries out all possible
combination and picks the best, in this case the least number of trips. This algorithm avoids the 
weakness that the greedy has but it does so by trading time with it. As mentioned in my earlier answers,
The growth complexity of this algorithm is probably in factorial or exponential time, 
though this can probably be reduced by using a more efficient? set_partition algorithm.
'''