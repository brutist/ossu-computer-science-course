#!/bin/sh

#==============================================================================#
#   Usage: bash compare_cpp.sh <cpp_file1> <cpp_file2> <num_tests> [-v]
#         This script compiles two C++ files and compares their standard output
#         based on input files generated by the "test_maker.sh" script.
#         Add -v for verbosity to print inputs and outputs.

#           Dependencies: test_maker.sh in the same dir as the cpp files
#==============================================================================#

# Ensure at least three arguments are provided
if [ $# -lt 3 ]; then
    echo "Usage: $0 <cpp_file1> <cpp_file2> <num_tests> [-v]"
    exit 1
fi

# C++ files and number of tests
cpp_file1="$1"
cpp_file2="$2"
num_tests="$3"

# Limit num_tests to a maximum of 1000
if [ "$num_tests" -gt 1000 ]; then
    echo "Limiting number of tests to 1000."
    num_tests=1000
fi

# Check if the verbosity flag is passed
verbose=false
if [ "$4" = "-v" ]; then
    verbose=true
fi

# Check if the provided C++ files exist and have a .cpp extension
if [ ! -f "$cpp_file1" ] || [[ "$cpp_file1" != *.cpp ]]; then
    echo "Error: $cpp_file1 is not a valid C++ file."
    exit 1
fi

if [ ! -f "$cpp_file2" ] || [[ "$cpp_file2" != *.cpp ]]; then
    echo "Error: $cpp_file2 is not a valid C++ file."
    exit 1
fi

# Directory where the 'tests' folder is located (assumed to be in the same folder as the script)
test_folder="$(dirname "$cpp_file1")/tests"

# Create the test folder if it doesn't exist
if [ ! -d "$test_folder" ]; then
    mkdir -p "$test_folder"
fi

# Step 1: Compile both C++ files
echo "Compiling $cpp_file1..."
c++ -std=c++14 -Wall "$cpp_file1" -o prog1.out
if [ $? -ne 0 ]; then
    echo "Error: Compilation of $cpp_file1 failed."
    exit 1
fi

echo "Compiling $cpp_file2..."
c++ -std=c++14 -Wall "$cpp_file2" -o prog2.out
if [ $? -ne 0 ]; then
    echo "Error: Compilation of $cpp_file2 failed."
    exit 1
fi

# Step 2: Ensure test_maker.sh is executable
test_maker_script="$(dirname "$cpp_file1")/test_maker.sh"
if [ ! -x "$test_maker_script" ]; then
    echo "Setting executable permission for test_maker.sh..."
    chmod +x "$test_maker_script"
fi

# Step 3: Use test_maker.sh to create 'n' test inputs and save them in numbered files in "tests" folder
echo "Generating $num_tests test cases..."
for i in $(seq -f "%04g" 0 $((num_tests-1))); do
    "$test_maker_script" "$i" > "$test_folder/$i"
done

# Step 4: Use the "naive" implementation to create expected outputs
if [[ "$cpp_file1" == *naive* ]]; then
    naive_program="./prog1.out"
else
    naive_program="./prog2.out"
fi

echo "Generating expected output using the naive implementation ($naive_program)..."
for input_file in "$test_folder"/[0-9][0-9][0-9][0-9]; do
    if [ -f "$input_file" ]; then
        $naive_program < "$input_file" > "${input_file}.a"
    fi
done

# Step 5: Compare the output of both C++ programs with expected output
echo "Comparing outputs..."

for input_file in "$test_folder"/[0-9][0-9][0-9][0-9]; do
    if [ -f "$input_file" ]; then
        output_prog1=$(./prog1.out < "$input_file")
        output_prog2=$(./prog2.out < "$input_file")
        expected_output=$(cat "${input_file}.a")

        if [ "$output_prog1" = "$output_prog2" ] && [ "$output_prog1" = "$expected_output" ]; then
            echo "Test $(basename "$input_file"): PASS"
        else
            echo "Test $(basename "$input_file"): FAIL"

            if [ "$verbose" = true ]; then
                echo "Expected Output:"
                echo "$expected_output"
                echo "Output from $cpp_file1:"
                echo "$output_prog1"
                echo "Output from $cpp_file2:"
                echo "$output_prog2"
            fi
        fi
    fi
done

# Clean up the compiled binaries
rm prog1.out prog2.out
