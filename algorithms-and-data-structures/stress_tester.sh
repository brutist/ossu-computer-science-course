#!/bin/sh

#==============================================================================#
#   Usage: bash compare_cpp.sh <cpp_dir> <num_tests> [-v] [--tests] [--max]
#         This script compiles two C++ files from the specified directory and
#         compares their standard output using inputs generated by "test_maker.sh".
#         Add -v for verbosity to print inputs and outputs.
#         Add --create-tests to save input/output in files.
#         Add --max to pass --max flag to test_maker.sh instead of --stress.
#==============================================================================#

# Ensure at least two arguments are provided
if [ $# -lt 2 ]; then
    echo "Usage: $0 <cpp_dir> <num_tests> [-v] [--tests] [--max]"
    exit 1
fi

# Directory containing the C++ files
cpp_dir="$1"
num_tests="$2"
verbose=false
create_tests=false
use_max_flag=false

# Process additional optional arguments (-v, --create-tests, and --max)
for arg in "$@"; do
    if [ "$arg" = "-v" ]; then
        verbose=true
    elif [ "$arg" = "--tests" ]; then
        create_tests=true
    elif [ "$arg" = "--max" ]; then
        use_max_flag=true
    fi
done

# Limit num_tests to a maximum of 1000
if [ "$num_tests" -gt 1000 ]; then
    echo "Limiting number of tests to 1000."
    num_tests=1000
fi

# Step 1: Identify C++ files
cpp_files=("$cpp_dir"/*.cpp)

# Validate that exactly two C++ files exist
if [ ${#cpp_files[@]} -ne 2 ]; then
    echo "Error: Directory must contain exactly two C++ files."
    exit 1
fi

# Identify naive and fast implementation
cpp_naive=""
cpp_fast=""

for cpp_file in "${cpp_files[@]}"; do
    if [[ "$cpp_file" == *naive* ]]; then
        cpp_naive="$cpp_file"
    else
        cpp_fast="$cpp_file"
    fi
done

if [ -z "$cpp_naive" ] || [ -z "$cpp_fast" ]; then
    echo "Error: One of the files must contain 'naive' in its name."
    exit 1
fi

# Step 2: Compile both C++ files
echo "Compiling $cpp_naive (naive implementation)..."
c++ -std=c++14 -Wall "$cpp_naive" -o prog_naive.out
if [ $? -ne 0 ]; then
    echo "Error: Compilation of $cpp_naive failed."
    exit 1
fi

echo "Compiling $cpp_fast (fast implementation)..."
c++ -std=c++14 -Wall "$cpp_fast" -o prog_fast.out
if [ $? -ne 0 ]; then
    echo "Error: Compilation of $cpp_fast failed."
    exit 1
fi

# Step 3: Ensure test_maker.sh is executable
test_maker_script="$cpp_dir/test_maker.sh"
if [ ! -x "$test_maker_script" ]; then
    echo "Setting executable permission for test_maker.sh..."
    chmod +x "$test_maker_script"
fi

# If --create-tests is provided, set up a tests directory
if [ "$create_tests" = true ]; then
    test_folder="$cpp_dir/tests"
    mkdir -p "$test_folder"
fi

# Variables for time tracking
total_time_naive=0
total_time_fast=0

# Determine which flag to pass to test_maker.sh (--max or --stress)
test_flag="--stress"
if [ "$use_max_flag" = true ]; then
    test_flag="--max"
fi

# Step 4: Generate test cases and compare
for i in $(seq -f "%04g" 0 $((num_tests-1))); do
    # Generate test case using test_maker.sh with the appropriate flag
    test_input=$("$test_maker_script" "$test_flag")

    # If create_tests is true, save the test case to a file
    if [ "$create_tests" = true ]; then
        echo "$test_input" > "$test_folder/$i"
    fi

    # Time execution of naive program
    TIMEFORMAT=%R
    time_naive=$( { time echo "$test_input" | ./prog_naive.out >/dev/null; } 2>&1 )

    # Time execution of fast program
    time_fast=$( { time echo "$test_input" | ./prog_fast.out >/dev/null; } 2>&1 )

    # Add to total time
    total_time_naive=$(echo "$total_time_naive + $time_naive" | bc)
    total_time_fast=$(echo "$total_time_fast + $time_fast" | bc)

    # Generate expected output using naive program
    expected_output=$(echo "$test_input" | ./prog_naive.out)

    # Run both programs on the same input
    output_prog_naive=$(echo "$test_input" | ./prog_naive.out)
    output_prog_fast=$(echo "$test_input" | ./prog_fast.out)

    # If create_tests is true, save the expected output to a file
    if [ "$create_tests" = true ]; then
        echo "$expected_output" > "$test_folder/$i.a"
    fi

    # Step 5: Compare outputs
    if [ "$output_prog_naive" = "$output_prog_fast" ] && [ "$output_prog_naive" = "$expected_output" ]; then
        echo "Test $i: PASS"
    else
        echo "Test $i: FAIL"
        if [ "$verbose" = true ]; then
            echo "Input:"
            echo "$test_input"
            echo "Expected Output:"
            echo "$expected_output"
            echo "Output from Naive:"
            echo "$output_prog_naive"
            echo "Output from Fast:"
            echo "$output_prog_fast"
        fi
    fi
done

# Step 6: Calculate and print average time for both programs
average_time_naive=$(echo "scale=4; $total_time_naive / $num_tests" | bc)
average_time_fast=$(echo "scale=4; $total_time_fast / $num_tests" | bc)

echo "Average time for Naive program: $average_time_naive seconds"
echo "Average time for Fast program: $average_time_fast seconds"

# Clean up the compiled binaries
rm prog_naive.out prog_fast.out
